# Parameters to setup experiment.
experiment:
  # Unique experiment identifier
  # id: planes_only_blurrySTD2
  # id: planes_only_258recovery
  # id: planesOnly_fromOther4NoPaper453K_paper4noised5_0
  id: planesOnly_fromNoDetach1572K_paper4_8xLR
  # Experiment logs will be stored at "logdir"/"id"
  logdir: /scratch/gpfs/yb6751/projects/VolumetricEnhance/logs
  # Seed for random number generators (for repeatability).
  randomseed: 10 # 34  # 8239
  # Number of training iterations.
  train_iters: 750000
  # Number of training iterations after which to validate.
  validate_every: [0.1,5000] #50
  # Number of training iterations after which to checkpoint.
  save_every: 10.0 #5000
  # Number of training iterations after which to print progress.
  print_every: 100

# Dataset parameters.
dataset:
  # Base directory of dataset.
  # type: llff # DTU,synt,llff
  synt: 
    root: /scratch/gpfs/yb6751/datasets/Synthetic
    # Near clip plane (clip all depth values closer than this threshold).
    near: 2
    # Far clip plane (clip all depth values farther than this threshold).
    far:  6
    no_ndc: True
  llff: 
    root: /scratch/gpfs/yb6751/datasets/LLFF
    near: 0
    far:  1
    no_ndc: False
  max_scenes_eval:  2
  # auto_remove_val:  True
  dir:
    train:
      # 8,200,32:   ['ship##1']
      8,200,32:   ['mic##1','ship##1','chair##1','lego##1',] #'ficus##1','materials##1','hotdog##1','drums##1'
      # 8,200,32:   ['mic##Noise5','ship##Noise5','chair##Noise5','lego##Noise5',]
      # 8,200,32:   ['mic##Gauss1','ship##Gauss1','chair##Gauss1','lego##Gauss1',]
      # 8,200,32,'synt',1:   ['mic','ship']
      # 8,200,32,'synt',1:   ['mic']
      # 2,800,32,'synt',1:   ['engine','fruits','house','marble_fireplace','piano','plane','robot','satellite','speakers','steamTrain','thuja','toad','triceratops','chair','drums','ficus','hotdog','lego','materials','bugatti','cola','donut','guitar','holiday','motorbike','teddy','dragon']
      # 2,800,32,'synt',1:   ['engine']
      # 8,200,32:   ['chair##Gauss2','drums##Gauss2','ficus##Gauss2','hotdog##Gauss2','lego##Gauss2','materials##Gauss2','mic##Gauss2','ship##Gauss2',]
    val:
      2,800,32:   ['mic##1','ship##1','chair##1','lego##1',] #'ficus##1','materials##1','hotdog##1','drums##1'
      # 2,800,32:   ['mic##Noise5','ship##Noise5','chair##Noise5','lego##Noise5',]
      # 2,800,32:   ['mic##Gauss1','ship##Gauss1','chair##Gauss1','lego##Gauss1',]
      # 2,800,32,'synt':   ['mic','ship']
      # 2,800,32,'synt':   ['mic']
  # Optionally, provide a path to the pre-cached dataset dir. This
  # overrides the other dataset options.
  cachedir: cache/legocache200
  # For the Blender datasets (synthetic), optionally return images
  # at half the original resolution of 800 x 800, to save space.
  # Stride (include one per "testskip" images in the dataset).
  testskip: 10
  llffhold: 2 #4

# Model parameters.
models:
  # path: /scratch/gpfs/yb6751/projects/VolumetricEnhance/logs/E2E_Synt_Res25Sc200_21Sc800_32_LR100_400_noDetach_Lean_other4NoPaper4_0_copy453K
  # path: /scratch/gpfs/yb6751/projects/VolumetricEnhance/logs/E2E_Synt_Res29Sc200_27Sc800_32_LR100_400_noDetach_Lean_paper4_Gauss_0_copy579K
  path: /scratch/gpfs/yb6751/projects/VolumetricEnhance/logs/E2E_Synt_Res29Sc200_27Sc800_32_LR100_400_noDetach_Lean_paper4_Gauss_0_copy1572K
  # use_existing_planes:  True # If true, use saved planes saved in the decoder model folder for the relevant scenes, WITHOUT updating them.
  init_scenes_hack: True

# Optimizer params.
optimizer:
  # Name of the torch.optim class used for optimization.
  type: Adam
  # Learning rate.
  # lr: 5.E-4 #The original LR used in the end-2-end training
  lr: 4.E-3 # The x8 LR which I found to work best
  # lr_scheduler:
  #   patience: 5000
  #   factor: 0.5

# NeRF parameters.
nerf:
  # Use viewing directions as input, in addition to the X, Y, Z coordinates.
  use_viewdirs: True #False #True
  # Map view-direction plane coordinates to efficiently exploit the view-directions plane:
  # viewdir_mapping:  True
  # Normalize elevation angle range to the range observed across training image frames
  # adjust_elevation_range: 1.2 #True
  # # Encoding function for position (X, Y, Z).
  # encode_position_fn: None
  # # Encoding function for ray direction (theta, phi).
  # encode_direction_fn: None
  train:
    # what: ['LR_planes','decoder']
    what: ['LR_planes',]
    # planes_only: True
    # End-to-end training of representation and SR models
    # train_end2end:  LR_planes # HR_planes #LR_planes
    # Train the SR model to super-resolve the VALIDATION scenes as well, but using the LR images as supervision on these scenes
    # sr_val_scenes_with_LR:  True
    # In the end-2-end training, learn decoder and sr model separately by not performing decoder steps during SR iterations
    # separate_decoder_sr:  True
    # In the end-2-end training, learn the LR planes corresponding to the validation scenes without affecting the decoder (almost as if learned afterwards.)
    # separate_decoder_val_scenes:  True
    # In the end-2-end learning scheme, don't propagate gradients all the way to LR planes in iteration using the SR model. Meaning, learn 
    # the LR planes corresponding to the training scenes independently of the SR model (This is anyway indepepent for the evaluation scenes,
    #  since HR images are not available for their training) (default: True):
    detach_LR_planes: False
    # seperate_SR_planes_opt: True
    # # if specified, spatial_sampling is the factor that multiplies the necessary patch area to yield num_random_rays. Should be >=1. Then rays are randomly sampled from this area.
    # spatial_sampling: 1.
    # Number of random rays to retain from each image.
    # These sampled rays are used for training, and the others are discarded.
    num_random_rays: 4096  # 32 * 32 * 4
    # Size of each chunk (rays are batched into "chunks" and passed through
    # the network)
    chunksize: 131072  # 131072  # 1024 * 32
    # Save GPU memory by holding plane variables on cpu memory until needed:
    # save_GPU_memory: True
    # Store and load plane parameters using hard drive to allow simultaneously training on many scenes:
    store_planes:
      # buffer_size:  5
      # buffer_size:  Makes no sense to use a buffer here since there is no point in alternating between scenes in this experiment (as decoder and SR model are fixed)
      steps_per_buffer: 5
    # Whether or not to perturb the sampled depth values.
    perturb: True
    STD_factor: 0.34
    # Number of depth samples per ray for the coarse network.
    num_coarse: 64
    # Number of depth samples per ray for the fine network.
    num_fine: 64
    # Whether to render models using a white background.
    white_background: False
    # Add Gaussian noise to points coordinates before projecting them to planes:
    # point_coords_noise: 0.1
    # Encourage per-channel 0 mean on the planes. This is meant to replace input normalization for SR in the end-2-end training scheme.
    # zero_mean_planes_w: 0 #0 #1
    # Standard deviation of noise to be added to the radiance field when
    # performing volume rendering.
    radiance_field_noise_std: 0.2
    # Sample linearly in disparity space, as opposed to in depth space.
    lindisp: False
    # Randomly downsamples plane during training to enforce multi-resolution loss:
    # max_plane_downsampling: 12 #12
    # viewdir_downsampling: False
    # Dropout some planes during training (only when using more than 3 planes and proj_combination is set to 'avg'):
    # plane_dropout: 0.5
    # Train on only one scene until loss 
    # jump_start: [0.1,0.03] #[# scene (or portion of) training scenes to use in this phase, average loss threshold]
  # Validation-specific parameters.
  validation:
    # Number of random rays to retain from each image.
    # These sampled rays are used for training, and the others are discarded.
    chunksize: 131072   # 1024 * 32
    # Whether or not to perturb the sampled depth values.
    perturb: False
    # Number of depth samples per ray for the coarse network.
    num_coarse: 64
    # Number of depth samples per ray for the fine network.
    num_fine: 64
    # Whether to render models using a white background.
    white_background: False
    # Standard deviation of noise to be added to the radiance field when
    # performing volume rendering.
    radiance_field_noise_std: 0.
    # Sample linearly in disparity space, as opposed to in depth space.
    lindisp: False
super_resolution:
  # lr: 5.E-5
  # training:
  #   loss: fine # fine,coarse,both
  apply_2_coarse: False #True # False
  # Super-resolve view-directions plane as well, or only positional planes:
  SR_viewdir: False
  # input_normalization:  True
  # consistency_loss_w: 0 #1 #0.001
  # plane_loss_w:  0 #1
  # Add Gaussian noise to SR input, with STD relative to the plane's STD:
  # sr_input_noise: 0.1
  # sr_output_noise:  1
  # rendering_loss: 0
  # plane_dropout:  0.5
  # plane_resize_mode:  bicubic
  # model:
  # #   # path: /scratch/gpfs/yb6751/projects/VolumetricEnhance/logs/E2E_Synt_Res266Sc200_258Sc800_32_LR100_400_SRrecField55_PZerMean1_1
    # path: /scratch/gpfs/yb6751/projects/VolumetricEnhance/logs/E2E_Synt_Res25Sc200_21Sc800_32_LR100_400_noDetach_Lean_other4NoPaper4_0_copy453K
    # type: None
    # hidden_size: 256 #128 #256
    # n_blocks: 32

